<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                 <h1 class="m-0">Nuevo calculo</h1>
            </div>
            <div class="col-sm-12 mt-2">
                {{>success}}
                {{>errors}}
            </div>
        </div>
    </div>
</div>
<section class="content">
     <div class="row">
        <div class="col-sm-12" id="insertarErrores">
        </div>
    </div>
    <div class="card">
        <div class="card-header">
            <h4>Filtros</h4>
        </div>
        <div class="card-body">
            <dvi class="row">
                <div class="col-sm-3">
                    <label>Vendedor</label>
                    <select class="form-control js-exam" id="Vendedor">
                        <option value="0">--Seleccione un vendedor--</option>
                        {{#each vendedores}}
                            <option value="{{_id}}">{{Nombres}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-sm-3">
                    <label>Nota de entrega</label>
                    <select class="form-control js-exam" id="NotaEntrega">
                        <option value="0">--Seleccione una nota--</option>
                    </select>
                </div>
                <div class="col-sm-3">
                    <label>Comisión</label>
                    <input class="form-control" readonly id="MontoPendiente">
                </div>
                <div class="col-sm-3 mt-4">
                    <button class="btn btn-info mt-1 w-100" id="btnAgregar">Agregar a la lista</button>
                </div>
            </dvi> 
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">Nota entrega</th>
                        <th class="text-center">Comisión</th>
                        <th class="text-center">Eliminar</th>
                    </tr>
                </thead>
                <tbody id="tbody">

                </tbody>
                <tfoot>
                    <tr>
                        <td class="text-danger text-right">Total</td>
                        <td class="text-center" id="totalGeneral">0</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <div class="text-right">
        <button id="btnGenerar" class="btn btn-success">Generar calculo</button>
    </div>
</section>
<script>
    const d = document,
    $tbody = d.getElementById("tbody"),
    $btnAgregar = d.getElementById("btnAgregar"),
    $MontoPendiente = d.getElementById("MontoPendiente"),
    $insertErrors = d.getElementById("insertErrors"),
    $insertarErrores = d.getElementById("insertarErrores"),
    $NotaEntrega = d.getElementById("NotaEntrega"),
    $totalGeneral = d.getElementById("totalGeneral"),
    $Vendedor = d.getElementById("Vendedor"),
    $btnGenerar = d.getElementById("btnGenerar")
    let notasAgregadas = []  
    let notas
    const generarNuevoCalculo = async (data) => {
        return await fetch("/generar-nuevo-calculo-comision", {
            method: "POST",
            body: JSON.stringify(data),
            headers: {
            "Content-type": "application/json; charset=utf-8",
            },
        })
        .then((response) => {
            return response.json();
        })
        .then(async (response) => {
            await window.open(`/ver-calculo-comision/${response.Numero}`, `Calculo comisión ${response.Numero} ${response.Vendedor}`, "width=612, heigh=792");
            location.reload()
        });
    };

    const solicitarNotasVendedor = async (data) => {
        return await fetch("/solicitar-notas-vendedor-calculo-comision", {
            method: "POST",
            body: JSON.stringify(data),
            headers: {
            "Content-type": "application/json; charset=utf-8",
            },
        })
        .then((response) => {
            return response.json();
        })
        .then((response) => {
            let tr = ""
            notas = response
            console.log(response)
            let options = `<option value="0">--Seleccione una nota--</option>`
            for(i=0; i< response.length; i++){
                let opt = `<option value="${response[i].Numero}">${response[i].Numero}</option>`
                options += opt
            }
            $NotaEntrega.innerHTML = options
        });
    };

    $NotaEntrega.onchange = () => {
        if($NotaEntrega.value != 0){
            let coincidencia = notas.find((data) => data.Numero == $NotaEntrega.value)
            $MontoPendiente.value = coincidencia.GananciasVendedor
        }else{
            $MontoPendiente.value = ""
        }
    }

    $Vendedor.onchange = () => {
        if($Vendedor.value != 0){
            let data = {
                Vendedor: $Vendedor.value
            }
            solicitarNotasVendedor(data)
        }else{
            $NotaEntrega.innerHTML = `<option value="0">--Seleccione una nota--</option>`
            $MontoPendiente.value = ""
        }
    }

    d.addEventListener("click", e=> {
        if(e.target == $btnAgregar){
            let validacion = 0
            if($Vendedor.value == 0 || !$Vendedor.value){
                $insertarErrores.innerHTML += `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        Debe seleccionar un vendedor para poder agregar a la lista. Por favor, valide e intente de nuevo.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `
                window.scrollTo(0,0)
                validacion++
            }
            if($NotaEntrega.value == 0 || !$NotaEntrega.value){
                $insertarErrores.innerHTML += `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        Debe seleccionar una nota de entrega para poder agregar a la lista. Por favor, valide e intente de nuevo.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `
                window.scrollTo(0,0)
                validacion++
            }
            if(validacion == 0){
                let existenNota = notasAgregadas.find((data) => data == $NotaEntrega.value)
                if(existenNota){
                    $insertarErrores.innerHTML += `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            La nota de entrega ya se encuentra en la lista. Por favor, valide e intente de nuevo.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `
                 window.scrollTo(0,0)

                }
                else{
                    notasAgregadas.push($NotaEntrega.value)
                    let tr = `
                        <tr>
                            <td class="text-center">${$NotaEntrega.value}</td>
                            <td class="text-center">${$MontoPendiente.value}</td>
                            <td class="text-center"><button class="btn btn-danger">-</button></td>
                        </tr>
                    `
                    $totalGeneral.textContent = (+$totalGeneral.textContent + +$MontoPendiente.value).toFixed(2)
                    $Vendedor.setAttribute("disabled","")
                    $tbody.innerHTML += tr
                }
            }
        }
        if(e.target.textContent == "-"){
            let linea = e.target.parentElement.parentElement
            notasAgregadas = notasAgregadas.filter((data) => data != linea.children[0].textContent)
            $totalGeneral.textContent = (+$totalGeneral.textContent - +linea.children[1].textContent).toFixed(2)
            $tbody.removeChild(linea)
            if($tbody.children.length == 0){
                $Vendedor.removeAttribute("disabled")
            }
        }
        if(e.target == $btnGenerar){
            if($tbody.children.length == 0){
                $insertarErrores.innerHTML += `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        Para poder generar el documento de calculo debe agregar como minimo una nota de entrega. Por favor, valide e 
                        intete de nuevo
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `
                window.scrollTo(0,0)
            }else{
                let notas = []
                for(i=0; i< $tbody.children.length; i++){
                    let subdata = {
                        NotaEntrega: $tbody.children[i].children[0].textContent, 
                        Comision: $tbody.children[i].children[1].textContent,
                    }
                    notas.push(subdata)
                }
                let dataEnvio = {
                    Vendedor: $Vendedor.value,
                    Total: $totalGeneral.textContent,
                    Notas: notas
                }
                generarNuevoCalculo(dataEnvio)
            }
        }
    })


</script>